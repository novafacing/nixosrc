{ config, pkgs, ... }:

{
  imports = [
    # hardware-configuration.nix will be different per system, 
    # luckily the autogenerated one is good to go in most cases.
    ./hardware-configuration.nix
    # This gives us access to the <home-manager/nixos> package for use later on
    "${builtins.fetchTarball https://github.com/rycee/home-manager/archive/master.tar.gz}/nixos"
    # This descends into the modules directory where most of the configs are stored
    # directory imports look for a default.nix and run it
    ./modules
  ];

  # Allows configuration of the nixpkgs (basically if you want free only or also nonfree)
  # Like above, the import just runs that nix file
  nixpkgs.config = import ./config/nixpkgs.nix;

  # Enable systemd + settings
  boot.loader.systemd-boot.enable = true;
  boot.loader.efi.canTouchEfiVariables = true;

  # Configure timezone
  time.timeZone = "America/Indiana/Indianapolis";

  # Add any MUST-have packages (for example when something breaks)
  environment.systemPackages = with pkgs; [
    neovim
    git
  ];

  # Hardware options
  sound.enable = true;
  hardware.pulseaudio.enable = true;

  # Use the config file to create a username with the correct settings
  users.users.${config.settings.username} = {
    isNormalUser = true;
    createHome = true;
    home = "/home/${config.settings.username}";
    extraGroups = [ 
      "wheel" 
      "networkmanager"
    ];
    shell = pkgs.zsh;
  };

  # Add ourselves to the home-manager config and use home manager to set up 
  # whatever we want to use home-manager for. Sometimes home-manager is helpful and
  # makes things easier, sometimes it makes them harder. Depends ;)
  home-manager.users.${config.settings.username} = import ./modules/home;

  # The nixos version :)
  system.stateVersion = "20.09";
}

