{ config, pkgs, ... }:
let
  settings = import ./config/settings.nix;
in
{
  imports = [
    # hardware-configuration.nix will be different per system, 
    # luckily the autogenerated one is good to go in most cases.
    ./hardware-configuration.nix
    # This gives us access to the <home-manager/nixos> package for use later on
    "${builtins.fetchTarball https://github.com/rycee/home-manager/archive/master.tar.gz}/nixos"
    # This descends into the modules directory where most of the configs are stored
    # directory imports look for a default.nix and run it
    ./modules
  ];

  # Allows configuration of the nixpkgs (basically if you want free only or also nonfree)
  # Like above, the import just runs that nix file

  # Enable systemd + settings
  boot.loader.systemd-boot.enable = true;
  boot.loader.efi.canTouchEfiVariables = true;
  boot.kernelPackages = pkgs.linuxPackages_latest;
  boot.extraModulePackages = [
    (pkgs.linuxPackages_latest.v4l2loopback.overrideAttrs({ ... }: {
      src = pkgs.fetchFromGitHub {
        owner = "umlaeute";
        repo = "v4l2loopback";
        # master 2020-04-17
        rev = "10b1c7e6bda4255fdfaa187ce2b3be13433416d2";
        sha256 = "0xsn4yzj7lwdg0n7q3rnqpz07i9i011k2pwn06hasd45313zf8j2";
      };
    }))
  ];
  boot.extraModprobeConfig = ''
    options v4l2loopback exclusive_caps=1 video_nr=9 card_label="obs"
  '';

  # Configure timezone
  time.timeZone = "America/Indiana/Indianapolis";

  # Hardware options
  sound.enable = true;
  hardware.pulseaudio = {
    enable = true;
    package = pkgs.pulseaudioFull;
  };

  # Enable docker
  virtualisation.docker.enable = true;
  #virtualisation.virtualbox.host.enable = true;
  #virtualisation.virtualbox.guest.enable = true;
  #virtualisation.virtualbox.host.enableExtensionPack = true;

  # This is needed for steam
  hardware.opengl.driSupport32Bit = true;

  # Use the config file to create a username with the correct settings
  users.users.${settings.username} = {
    isNormalUser = true;
    createHome = true;
    home = "/home/${settings.username}";
    extraGroups = [ 
      "wheel" 
      "networkmanager"
      "docker"
      "audio"
      "video"
      "vboxusers"
    ];
    shell = pkgs.zsh;
  };

  #services.fprintd.enable = true;
  #security.pam.services.login.fprintAuth = true;
  #security.pam.services.sudo.fprintAuth = true;
  # services.spotifyd.enable = true;
  # services.spotifyd.config = builtins.readFile /etc/nixos/nixos-private/spotifyd.config;
  services.logind.lidSwitch = "ignore";
  security.sudo.enable = true;
  security.sudo.extraConfig = ''
    %wheel ALL=(ALL) NOPASSWD: ALL
  '';
  services.printing.enable = true;
  services.printing.drivers = [
    pkgs.gutenprint
    pkgs.gutenprintBin
    pkgs.canon-cups-ufr2
  ];

  # Add ourselves to the home-manager config and use home manager to set up 
  # whatever we want to use home-manager for. Sometimes home-manager is helpful and
  # makes things easier, sometimes it makes them harder. Depends ;)
  home-manager.users.${settings.username} = import ./modules/home;

  # The nixos version :)
  system.stateVersion = "20.09";

  nix.gc = {
    automatic = true;
    dates = "weekly";
    options = "--delete-older-than 7d";
  };
}

